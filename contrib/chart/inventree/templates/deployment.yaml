{{- if and (include "inventree.host" .) (or .Values.postgresql.enabled .Values.externalDatabase.host) -}}
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ include "common.names.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels: {{- include "common.labels.standard" ( dict "customLabels" .Values.commonLabels "context" $ ) | nindent 4 }}
  {{- if .Values.commonAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.commonAnnotations "context" $ ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  {{- $podLabels := include "common.tplvalues.merge" ( dict "values" ( list .Values.podLabels .Values.commonLabels ) "context" . ) }}
  selector:
    matchLabels: {{- include "common.labels.matchLabels" ( dict "customLabels" $podLabels "context" $ ) | nindent 6 }}
  {{- if .Values.updateStrategy }}
  strategy: {{- toYaml .Values.updateStrategy | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps.yaml") . | sha256sum }}
        checksum/secrets-inventree: {{ include (print $.Template.BasePath "/secrets-inventree.yaml") . | sha256sum }}
        checksum/secrets-database: {{ include (print $.Template.BasePath "/secrets-database.yaml") . | sha256sum }}
        checksum/secrets-redis: {{ include (print $.Template.BasePath "/secrets-redis.yaml") . | sha256sum }}
        {{- if .Values.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.podAnnotations "context" $) | nindent 8 }}
        {{- end }}
      labels: {{- include "common.labels.standard" ( dict "customLabels" $podLabels "context" $ ) | nindent 8 }}
    spec:
      {{- include "inventree.imagePullSecrets" . | nindent 6 }}
      automountServiceAccountToken: {{ .Values.automountServiceAccountToken }}
      {{- if .Values.hostAliases }}
      hostAliases: {{- include "common.tplvalues.render" (dict "value" .Values.hostAliases "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" $) | nindent 8 }}
      {{- else }}
      affinity:
        podAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAffinityPreset "customLabels" $podLabels "context" $) | nindent 10 }}
        podAntiAffinity: {{- include "common.affinities.pods" (dict "type" .Values.podAntiAffinityPreset "customLabels" $podLabels "context" $) | nindent 10 }}
        nodeAffinity: {{- include "common.affinities.nodes" (dict "type" .Values.nodeAffinityPreset.type "key" .Values.nodeAffinityPreset.key "values" .Values.nodeAffinityPreset.values) | nindent 10 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" $) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName | quote }}
      {{- end }}
      {{- if .Values.schedulerName }}
      schedulerName: {{ .Values.schedulerName }}
      {{- end }}
      serviceAccountName: {{ include "inventree.serviceAccountName" . }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.podSecurityContext "context" $) | nindent 8 }}
      {{- end }}
      initContainers:
        {{- if .Values.initContainers }}
        {{- include "common.tplvalues.render" (dict "value" .Values.initContainers "context" $) | nindent 8 }}
        {{- end }}
        {{- if and .Values.volumePermissions.enabled .Values.persistence.enabled }}
        - name: volume-permissions
          image: {{ include "inventree.image" . }}
          imagePullPolicy: {{ .Values.volumePermissions.image.pullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /home/inventree/data
              find /home/inventree/data -mindepth 1 -maxdepth 1 -not -name ".snapshot" -not -name "lost+found" | xargs chown -R {{ .Values.inventree.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}
          {{- if .Values.volumePermissions.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.volumePermissions.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.volumePermissions.resources }}
          resources: {{- toYaml .Values.volumePermissions.resources | nindent 12 }}
          {{- else if ne .Values.volumePermissions.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.volumePermissions.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: inventree-data
              mountPath: /home/inventree/data
        {{- end }}
      containers:
        - name: inventree-server
          image: {{ include "inventree.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.inventree.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.inventree.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.inventree.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.inventree.command "context" $) | nindent 12 }}
          {{- else }}
          command:
            - /bin/bash
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.inventree.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.inventree.args "context" $) | nindent 12 }}
          {{- else }}
          args:
            - -c
            - |
              {{- if .Values.inventree.plugins }}
              pushd "/opt/inventree/data" >/dev/null || exit 1
              {{- range $plugin := .Values.inventree.plugins }}
              pip install {{ $plugin }}
              {{- end }}
              {{- if .Values.inventree.persistPlugins }}
              RAILS_ENV=production bundle exec rake plugin:update_all
              {{- end }}
              {{- if .Values.inventree.compatiblePlugins }}
              RAILS_ENV=production LOAD_PLUGINS=0 bundle exec rake plugin:pull_compatible_all
              {{- end }}
              popd >/dev/null || exit 1
              {{- end }}
              /home/inventree/entrypoint.sh /home/inventree/run.sh
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: INVENTREE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.secretName" . }}
                  key: inventree-password
            - name: INVENTREE_PORT_NUMBER
              value: {{ .Values.inventree.containerPorts.http | quote }}
            - name: INVENTREE_EXTERNAL_HTTP_PORT_NUMBER
              value: {{ .Values.service.ports.http | quote }}
            - name: INVENTREE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.database.secretName" . }}
                  key: {{ include "inventree.database.secretPasswordKey" . }}
            - name: POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.database.secretName" . }}
                  key: {{ include "inventree.database.secretPasswordKey" . }}
            {{- if or .Values.postgresql.enabled .Values.externalDatabase.create }}
            - name: POSTGRESQL_CLIENT_POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.database.secretName" . }}
                  key: {{ include "inventree.database.secretPostgresPasswordKey" . }}
            {{- end }}
            {{- if (include "inventree.redis.auth.enabled" .) }}
            - name: INVENTREE_REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.redis.secretName" . }}
                  key: {{ include "inventree.redis.secretPasswordKey" . }}
            {{- end }}
            {{- if (include "smtp.password.enabled" .) }}
            - name: INVENTREE_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "smtp.secretName" . }}
                  key: smtp-password
            {{- end }}
            {{- if not .Values.inventree.persistPlugins }}
            - name: INVENTREE_DATA_TO_PERSIST
              value: "public/backups public/uploads"
            {{- end }}
            {{- if .Values.inventree.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.inventree.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
            {{- if .Values.inventree.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.inventree.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.inventree.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.inventree.extraEnvVarsSecret }}
            {{- end }}
          ports:
            - name: http
              containerPort: {{ .Values.inventree.containerPorts.http }}
              protocol: TCP
            {{- if .Values.inventree.extraContainerPorts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.inventree.extraContainerPorts "context" $) | nindent 12 }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.inventree.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.inventree.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.inventree.livenessProbe.enabled }}
          livenessProbe:
            httpGet:
              path: /srv/status
              port: http
            initialDelaySeconds: {{ .Values.inventree.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.inventree.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.inventree.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.inventree.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.inventree.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.inventree.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.inventree.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.inventree.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /srv/status
              port: http
            initialDelaySeconds: {{ .Values.inventree.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.inventree.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.inventree.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.inventree.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.inventree.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.inventree.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.inventree.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.inventree.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.inventree.startupProbe "enabled") "context" $) | nindent 12 }}
            tcpSocket:
              port: http
          {{- end }}
          {{- end }}
          {{- if .Values.inventree.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.inventree.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.inventree.resources }}
          resources: {{- toYaml .Values.inventree.resources | nindent 12 }}
          {{- else if ne .Values.inventree.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.inventree.resourcesPreset) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: inventree-data
              mountPath: /home/inventree/data
              subPath: inventree
            {{- if .Values.inventree.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.inventree.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        - name: sidekiq
          image: {{ include "inventree.image" . }}
          imagePullPolicy: {{ .Values.image.pullPolicy | quote }}
          {{- if .Values.sidekiq.containerSecurityContext.enabled }}
          securityContext: {{- include "common.compatibility.renderSecurityContext" (dict "secContext" .Values.sidekiq.containerSecurityContext "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.command "context" $) | nindent 12 }}
          {{- else if .Values.sidekiq.command }}
          command: {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.command "context" $) | nindent 12 }}
          {{- end }}
          {{- if .Values.diagnosticMode.enabled }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.diagnosticMode.args "context" $) | nindent 12 }}
          {{- else if .Values.sidekiq.args }}
          args: {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.args "context" $) | nindent 12 }}
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: {{ ternary "true" "false" .Values.image.debug | quote }}
            - name: INVENTREE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.secretName" . }}
                  key: inventree-password
            - name: INVENTREE_POSTGRESQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.database.secretName" . }}
                  key: {{ include "inventree.database.secretPasswordKey" . }}
            {{- if (include "inventree.redis.auth.enabled" .) }}
            - name: REDIS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "inventree.redis.secretName" . }}
                  key: {{ include "inventree.redis.secretPasswordKey" . }}
            {{- end }}
            {{- if (include "smtp.password.enabled" .) }}
            - name: INVENTREE_SMTP_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "smtp.secretName" . }}
                  key: smtp-password
            {{- end }}
            {{- if .Values.sidekiq.extraEnvVars }}
            {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.extraEnvVars "context" $) | nindent 12 }}
            {{- end }}
          envFrom:
            - configMapRef:
                name: {{ include "common.names.fullname" . }}
            {{- if .Values.sidekiq.extraEnvVarsCM }}
            - configMapRef:
                name: {{ .Values.sidekiq.extraEnvVarsCM }}
            {{- end }}
            {{- if .Values.sidekiq.extraEnvVarsSecret }}
            - secretRef:
                name: {{ .Values.sidekiq.extraEnvVarsSecret }}
            {{- end }}
          {{- if not .Values.diagnosticMode.enabled }}
          {{- if .Values.sidekiq.customLivenessProbe }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.customLivenessProbe "context" $) | nindent 12 }}
          {{- else if .Values.sidekiq.livenessProbe.enabled }}
          livenessProbe:
            exec:
              command: ["/bin/sh", "-c", "pgrep -f ^sidekiq"]
            initialDelaySeconds: {{ .Values.sidekiq.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.sidekiq.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.sidekiq.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.sidekiq.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.sidekiq.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.sidekiq.customReadinessProbe }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.customReadinessProbe "context" $) | nindent 12 }}
          {{- else if .Values.sidekiq.readinessProbe.enabled }}
          readinessProbe:
            exec:
              command: ["/bin/sh", "-c", "pgrep -f ^sidekiq"]
            initialDelaySeconds: {{ .Values.sidekiq.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.sidekiq.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.sidekiq.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.sidekiq.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.sidekiq.readinessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.sidekiq.customStartupProbe }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.customStartupProbe "context" $) | nindent 12 }}
          {{- else if .Values.sidekiq.startupProbe.enabled }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" (omit .Values.sidekiq.startupProbe "enabled") "context" $) | nindent 12 }}
            exec:
              command: ["/bin/sh", "-c", "pgrep -f ^sidekiq"]
          {{- end }}
          {{- end }}
          {{- if .Values.sidekiq.resources }}
          resources: {{- toYaml .Values.sidekiq.resources | nindent 12 }}
          {{- else if ne .Values.sidekiq.resourcesPreset "none" }}
          resources: {{- include "common.resources.preset" (dict "type" .Values.sidekiq.resourcesPreset) | nindent 12 }}
          {{- end }}
          {{- if .Values.sidekiq.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.lifecycleHooks "context" $) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: inventree-data
              mountPath: /home/inventree/data
              subPath: inventree
            {{- if .Values.sidekiq.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.sidekiq.extraVolumeMounts "context" $) | nindent 12 }}
            {{- end }}
        {{- if .Values.sidecars }}
        {{- include "common.tplvalues.render" (dict "value" .Values.sidecars "context" $) | nindent 8 }}
        {{- end }}
      volumes:
        - name: inventree-data
          {{- if .Values.persistence.enabled }}
          persistentVolumeClaim:
            claimName: {{ default (include "common.names.fullname" .) (tpl .Values.persistence.existingClaim $)}}
          {{- else }}
          emptyDir: {}
          {{ end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes "context" $) | nindent 8 }}
        {{- end }}
{{- end }}
